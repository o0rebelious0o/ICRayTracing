#include "raycast.h"

// Add any code you need here and in the corresponding header
// file.


// Constructor with parameters.
OrthographicCamera::OrthographicCamera(Vec3f centre, Vec3f direction, Vec3f up, float size)
{
	float dotProd;

	//Set values for object
	this->centre = centre;
	this->direction = direction;
	this->up = up;
	this->size = size;
	
	//Normalize vectors
	this->direction.Normalize();
	this->up.Normalize();

	//Check if up and direction are orthogonal
	dotProd = this->direction.Dot3(up);
	//If they're not
	if(dotProd)
	{
		Vec3f base = this->centre + (this->up) * dotProd;
		Vec3f tip = this->centre + this->up;
		this->up = tip - base;
		this->up.Normalize();
	}
	
	//Find perpendicular horizontal vector and Normalize
	Vec3f::Cross3(horizontal, this->direction, this->up);
	horizontal.Normalize();
}


Ray OrthographicCamera::generateRay(Vec2f point)
{
	Vec3f origin(centre);
	origin += horizontal * ((point.x() - 0.5) * size) ;
	origin += up * ((point.y() - 0.5) * size);

	return Ray(direction, origin);
}
